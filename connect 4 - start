import pygame
import random
import time
import math

# Define the colors
BLUE = (0, 0, 255) #blue
RED = (255, 0, 0) #red
YELLOW = (255, 255, 0) #yellow
black = (0,0,0)

# Define the dimensions of the game board
EMPTY = 0
ROW_COUNT = 6
COLUMN_COUNT = 7

# Define the size of each cell in the game board
SQUARE_SIZE = 100

# Define the size of the screen
SCREEN_WIDTH = COLUMN_COUNT * SQUARE_SIZE
SCREEN_HEIGHT = (ROW_COUNT + 1) * SQUARE_SIZE

pygame.init()

# Initialize the Pygame screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Connect 4")

# Define the position and size of the button
button_x = 100
button_y = 100
button_width = 100
button_height = 50

# Define the color of the button
button_color = (255, 0, 0)

board = [[0]*7 for i in range(6)]

# Drawing the game board and the game pieces on the screen
def draw_board(board):
    for row in range(ROW_COUNT):
        for column in range(COLUMN_COUNT):
            # Blue rectangle for the cell
            pygame.draw.rect(screen, BLUE, (column * SQUARE_SIZE, (row + 1) * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))
            # Black circles inside the rectangle
            pygame.draw.circle(screen, black, (int(column * SQUARE_SIZE + SQUARE_SIZE / 2), int((row + 1) * SQUARE_SIZE + SQUARE_SIZE / 2)), int(SQUARE_SIZE / 2-5))
            if board[row][column] == -1:
                # Red circle for player 1 game piece
                pygame.draw.circle(screen, RED, (int(column * SQUARE_SIZE + SQUARE_SIZE / 2), int((row + 1) * SQUARE_SIZE + SQUARE_SIZE / 2)), int(SQUARE_SIZE / 2 - 5))
            elif board[row][column] == 1:
                # Yellow circle for player 2 game piece
                pygame.draw.circle(screen, YELLOW, (int(column * SQUARE_SIZE + SQUARE_SIZE / 2), int((row + 1) * SQUARE_SIZE + SQUARE_SIZE / 2)), int(SQUARE_SIZE / 2 - 5))
    
    pygame.display.update()

# Dropping a game piece on the game board
def drop_piece(board, row, column, piece):
    board[row][column] = piece

# Checking if a given column is a valid location for dropping a game piece
def is_valid_location(board, column):
    return board[ROW_COUNT - 1][column] == 0

def GetValidLocations(board):
    ValidLocations = []
    for col in range(0, 7):
        # If the the column has an emtpty space at the top then it's a valid location
        if (board[0][col] == 0):
            ValidLocations.append(col)
    return ValidLocations

# Resturns first valid row the game piece can fit in
def FirstValidRow(board, col):
    for r in range(5, -1, -1):
        if (board[r][col] == 0):
            return r
    return -1


# Checking if one of the players won or whether the game should continue
def IsGameOver(board):
    # Check horizontal
    for i in range(0, 4):
        for j in range(0, 6):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j][i+1] == color and board[j][i+2] == color and board[j][i+3] == color):
                    return color

    # Check vertical
    for i in range(0, 7):
        for j in range(0, 3):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j+1][i] == color and board[j+2][i] == color and board[j+3][i] == color):
                    return color

    # Check diaganol (Upper left to lower right)
    for i in range(0, 4):
        for j in range(0, 3):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j+1][i+1] == color and board[j+2][i+2] == color and board[j+3][i+3] == color):
                    return color

    # Check diaganol (Upper right to lower left)
    for i in range(0, 4):
        for j in range(3, 6):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j-1][i+1] == color and board[j-2][i+2] == color and board[j-3][i+3] == color):
                    return color

    return 0


def evaluate_window(window, piece):
    score = 0
    opp_piece = -1
    if piece == -1: # if -1 agent
        opp_piece = 1 # assign 1 to computer

    # 4 continous pieces get the highest score
    if window.count(piece) == 4:
        score += 100
    # 3 continous pieces with an empty slot besides them
    elif window.count(piece) == 3 and window.count(EMPTY) == 1: 
        score += 5
    # 2 continous pieces with 2 empty slots besides them
    elif window.count(piece) == 2 and window.count(EMPTY) == 2: 
        score += 2
    # if the opponent has 3 continous pieces with an empty slot besides them gets the lowest score
    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1: 
        score -= 4

    return score


# Calculate all scores for each possible move for each player
def score_position(board, piece):
    score = 0
    # Calculate the score for the center column
    center_column = [row[7 // 2] for row in board]  # Get the center column of the board
    center_array = [int(i) for i in center_column]  # Convert the column to a list of integers
    center_count = center_array.count(piece)  # Count the number of times the current player's piece appears in the center column
    score += center_count * 3  # Add 3 points for each piece in the center column

    #score horizontal
    for r in range(0, 6):
        row_array = [int(i) for i in board[r]]
        for c in range(0, 4):
            window = row_array[c:c+4]
            score += evaluate_window(window, piece)

    #score vertical
    for c in range(0, 7):
        col_array = [int(board[r][c]) for r in range(0, 6)]
        for r in range(0, 3):
            window = col_array[r:r+4]
            score += evaluate_window(window, piece)

    #score diagonal
    for r in range(0, 3):
        for c in range(0, 4):
            window = [board[r + i][c + i] for i in range(0, 4)]
            score += evaluate_window(window, piece)

    #score diagonal
    for r in range(0, 3):
        for c in range(0, 4):
            window = [board[r + 3 - i][c + i] for i in range(0, 4)]
            score += evaluate_window(window, piece)

    return score


def Minimax(board, depth, MaxPlayer):
    ValidLocations = GetValidLocations(board)
    if (depth == 0 or IsGameOver(board) != 0):
        if (IsGameOver(board) == -1): # computer wins
            return None, -10000000000 
        elif (IsGameOver(board) == 1):
            return None, 10000000000 # agent wins
        elif (depth == 0):
            return None, score_position(board, 1) #agent

    column = random.choice(ValidLocations)

    if (MaxPlayer):
        MaxEvaluation = -math.inf
        for col in ValidLocations:
            row = FirstValidRow(board, col)
            TempBoard = [row[:] for row in board]
            TempBoard[row][col] = 1
            NewScore = Minimax(TempBoard, depth - 1, False)[1]
            if (NewScore > MaxEvaluation):
                MaxEvaluation = NewScore
                column = col

        return column, MaxEvaluation

    else:
        MaxEvaluation = math.inf
        for col in ValidLocations:
            row = FirstValidRow(board, col)
            TempBoard = [row[:] for row in board]
            TempBoard[row][col] = -1
            NewScore = Minimax(TempBoard, depth - 1, False)[1]
            if (NewScore < MaxEvaluation):
                MaxEvaluation = NewScore
                column = col

        return column, MaxEvaluation


def MinimaxAlphaBeta(board, depth, alpha, beta, MaxPlayer):
    ValidLocations = GetValidLocations(board)
    if (depth == 0 or IsGameOver(board) != 0):
        if (IsGameOver(board) == -1):
            return None, -10000000000
        elif (IsGameOver(board) == 1):
            return None, 10000000000
        elif (depth == 0):
            return None, score_position(board, 1)

    column = random.choice(ValidLocations)

    if (MaxPlayer):
        MaxEvaluation = -math.inf
        for col in ValidLocations:
            row = FirstValidRow(board, col)
            TempBoard = [row[:] for row in board]
            TempBoard[row][col] = 1
            NewScore = MinimaxAlphaBeta(TempBoard, depth - 1, alpha, beta, False)[1]
            if (NewScore > MaxEvaluation):
                MaxEvaluation = NewScore
                column = col
            alpha = max(alpha, MaxEvaluation)
            if (beta <= alpha):
                break
        return column, MaxEvaluation

    else:
        MaxEvaluation = math.inf
        for col in ValidLocations:
            row = FirstValidRow(board, col)
            TempBoard = [row[:] for row in board]
            TempBoard[row][col] = -1
            NewScore = MinimaxAlphaBeta(TempBoard, depth - 1, alpha, beta, False)[1]
            if (NewScore < MaxEvaluation):
                MaxEvaluation = NewScore
                column = col
            beta = min(beta, MaxEvaluation)
            if (beta <= alpha):
                break


        return column, MaxEvaluation


def run_game(board):
    # Initialize Pygame
    pygame.init()
    font = pygame.font.Font(None, 30)

    # Define the position and size of the buttons
    MinimaxButton_x = 100
    MinimaxButton_y = 300
    MinimaxButton_width = 200
    MinimaxButton_height = 70

    AlphaBetaButton_x = 390
    AlphaBetaButton_y = 300
    AlphaBetaButton_width = 200
    AlphaBetaButton_height = 70

    # Define the color of the buttons
    buttonColor = (255, 255, 255)

    DifficultyClicked = False
    AlgorithmClicked = False

    # Calculate the center position for the "Choose an algorithm" text
    text_width, text_height = font.size("Choose an algorithm")
    text_x = (SCREEN_WIDTH - text_width) // 2
    text_y = 200

    text_surface = font.render("Choose an algorithm", True, (255, 255, 255))
    screen.blit(text_surface, (text_x, text_y))
    pygame.display.update()

    # Loop until the user clicks the button
    while True:
        # Loop through all Pygame events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            elif event.type == pygame.MOUSEBUTTONDOWN:
                # Get the position of the mouse cursor
                mouse_x, mouse_y = pygame.mouse.get_pos()

                # Check if the mouse cursor is hovering over the button
                if (MinimaxButton_x < mouse_x < MinimaxButton_x + MinimaxButton_width and MinimaxButton_y < mouse_y < MinimaxButton_y + MinimaxButton_height):
                    algorithm = 1 # minimax
                    AlgorithmClicked = True
                    break  # exit the loop when the minimax button is clicked

                if (AlphaBetaButton_x < mouse_x < AlphaBetaButton_x + AlphaBetaButton_width and AlphaBetaButton_y < mouse_y < AlphaBetaButton_y + AlphaBetaButton_height):
                    algorithm = 2 #alpha beta
                    AlgorithmClicked = True
                    break  # exit the loop when the alpha beta button is clicked

        # Draw the button to the screen
        pygame.draw.rect(screen, buttonColor, (MinimaxButton_x, MinimaxButton_y, MinimaxButton_width, MinimaxButton_height))
        pygame.draw.rect(screen, buttonColor, (AlphaBetaButton_x, AlphaBetaButton_y, AlphaBetaButton_width, AlphaBetaButton_height))

        # Draw the text on the buttons
        text_surface = font.render("Minimax", True, (0, 0, 0))
        text_width, text_height = font.size("Minimax")
        screen.blit(text_surface, (MinimaxButton_x + (MinimaxButton_width - text_width) // 2, MinimaxButton_y + (MinimaxButton_height - text_height) // 2))

        text_surface = font.render("Alpha Beta", True, (0, 0, 0))
        text_width, text_height = font.size("Alpha Beta")
        screen.blit(text_surface, (AlphaBetaButton_x + (AlphaBetaButton_width - text_width) // 2, AlphaBetaButton_y + (AlphaBetaButton_height - text_height) // 2))

        # Update the display
        pygame.display.update()

        if (AlgorithmClicked == True):
            break


    # Define the position and size of the buttons
    Easy_x = 250
    Easy_y = 300
    Easy_width = 200
    Easy_height = 70

    Medium_x = 250
    Medium_y = 380
    Medium_width = 200
    Medium_height = 70

    Hard_x = 250
    Hard_y = 460
    Hard_width = 200
    Hard_height = 70

    # Define the color of the buttons
    buttonColor = (255, 255, 255)

    DifficultyClicked = False

    pygame.draw.rect(screen, (0, 0, 0), (0, 0, SCREEN_WIDTH, SCREEN_HEIGHT))
    
    # Calculate the center position for the "Choose an algorithm" text
    text_width, text_height = font.size("Choose difficulty")
    text_x = (SCREEN_WIDTH - text_width) // 2
    text_y = 200

    text_surface = font.render("Choose difficulty", True, (255, 255, 255))
    screen.blit(text_surface, (text_x, text_y))
    pygame.display.update()

    while True:
        # Loop through all Pygame events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            # Check if the button has been clicked
            elif (event.type == pygame.MOUSEBUTTONDOWN):
                # Get the position of the mouse cursor
                mouse_x, mouse_y = pygame.mouse.get_pos()

                # Check if the mouse cursor is hovering over the button
                if (Easy_x < mouse_x < Easy_x + Easy_width and Easy_y < mouse_y < Easy_y + Easy_height):
                    depth = 1  # easy
                    DifficultyClicked = True
                    break  # exit the loop when the easy button is clicked

                if (Medium_x < mouse_x < Medium_x + Medium_width and Medium_y < mouse_y < Medium_y + Medium_height):
                    depth = 2  # medium
                    DifficultyClicked = True
                    break  # exit the loop when the medium button is clicked

                if (Hard_x < mouse_x < Hard_x + Hard_width and Hard_y < mouse_y < Hard_y + Hard_height):
                    depth = 3  # hard
                    DifficultyClicked = True
                    break  # exit the loop when the hard button is clicked

        # Draw the button to the screen
        pygame.draw.rect(screen, buttonColor, (Easy_x, Easy_y, Easy_width, Easy_height))
        pygame.draw.rect(screen, buttonColor, (Medium_x, Medium_y, Medium_width, Medium_height))
        pygame.draw.rect(screen, buttonColor, (Hard_x, Hard_y, Hard_width, Hard_height))

        # Draw the text on the buttons
        text_surface = font.render("Easy", True, (0, 0, 0))
        text_width, text_height = font.size("Easy")
        screen.blit(text_surface, (Easy_x + (Easy_width - text_width) // 2, Easy_y + (Easy_height - text_height) // 2))

        text_surface = font.render("Medium", True, (0, 0, 0))
        text_width, text_height = font.size("Medium")
        screen.blit(text_surface, (Medium_x + (Medium_width - text_width) // 2, Medium_y + (Medium_height - text_height) // 2))

        text_surface = font.render("Hard", True, (0, 0, 0))
        text_width, text_height = font.size("Hard")
        screen.blit(text_surface, (Hard_x + (Hard_width - text_width) // 2, Hard_y + (Hard_height - text_height) // 2))

        # Update the display
        pygame.display.update()

        if (DifficultyClicked == True):
            break

    # Draw the Connect 4 board
    draw_board(board)

    if (algorithm == 1):
        column, minimaxscore = Minimax(board, depth, True)
    elif (algorithm == 2):
        column, minimaxscore = MinimaxAlphaBeta(board, depth, -math.inf, math.inf, True)

    row = FirstValidRow(board, column)
    board[row][column] = 1

    draw_board(board)

    # Loop until the game is over
    for i in range(1, 42):  # Start from 1 since the computer already made its move
        # If the user clicks the mouse, drop a game piece in the clicked cell for the current player
        pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
        text_surface = font.render("Waiting for user", True, (255, 255, 255))
        screen.blit(text_surface, (10, 10))
        pygame.display.update()

        drop_piece = False
        while not drop_piece:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return
                if event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_x, mouse_y = pygame.mouse.get_pos()
                    if (mouse_x >= 0 and mouse_x < SCREEN_WIDTH and mouse_y >= 0 and mouse_y < SCREEN_HEIGHT):
                        # Calculate the column based on the mouse position
                        column = mouse_x // SQUARE_SIZE
                        row = FirstValidRow(board, column)
                        if row != -1:
                            board[row][column] = -1
                            drop_piece = True

        draw_board(board)

        if IsGameOver(board) != 0:  # game over
            if IsGameOver(board) == 1:
                message = "Computer WINS!"
            else:
                message = "User WINS!" if IsGameOver(board) == -1 else "IT'S A DRAW!"
            pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
            text_surface = font.render(message, True, (255, 255, 255))
            screen.blit(text_surface, (10, 10))
            pygame.display.update()
            time.sleep(5)
            break

        # Computer's turn
        pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
        text_surface = font.render("Waiting for computer", True, (255, 255, 255))
        screen.blit(text_surface, (10, 10))
        pygame.display.update()
        time.sleep(1.5)
        if (algorithm == 1):
            column, minimaxscore = Minimax(board, depth, True)
        elif (algorithm == 2):
            column, minimaxscore = MinimaxAlphaBeta(board, depth, -math.inf, math.inf, True)        
        
        row = FirstValidRow(board, column)
        board[row][column] = 1

        draw_board(board)

        if IsGameOver(board) != 0:  # game over
            if IsGameOver(board) == 1:
                message = "Computer WINS!"
            else:
                message = "User WINS!" if IsGameOver(board) == -1 else "IT'S A DRAW!"
            pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
            text_surface = font.render(message, True, (255, 255, 255))
            screen.blit(text_surface, (10, 10))
            pygame.display.update()
            time.sleep(5)
            break


    # Quit Pygame when the game is over
    # pygame.quit()

run_game(board)
