import pygame
import random
import time
import math

# Define the colors
PINK = (255, 105, 180)
WHITE = (0, 0, 0)
BLACK = (255, 255, 255)

# Define the dimensions of the game board
EMPTY = 0
ROW_COUNT = 6
COLUMN_COUNT = 7

# Define the size of each cell in the game board
SQUARE_SIZE = 100

# Define the size of the screen
SCREEN_WIDTH = COLUMN_COUNT * SQUARE_SIZE
SCREEN_HEIGHT = (ROW_COUNT + 1) * SQUARE_SIZE

pygame.init()

# Initialize the Pygame screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Connect 4")

# Define the position and size of the button
button_x = 100
button_y = 100
button_width = 100
button_height = 50

# Define the color of the button
button_color = (255, 0, 0)

board = [[0]*7 for i in range(6)]

# Method for drawing the game board and the game pieces on the screen
def draw_board(board):
    for row in range(ROW_COUNT):
        for column in range(COLUMN_COUNT):
            # Draw a pink rectangle for the cell
            pygame.draw.rect(screen, PINK, (column * SQUARE_SIZE, (row + 1) * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))
            if board[row][column] == -1:
                # Draw a white circle for player 1's game piece
                pygame.draw.circle(screen, WHITE, (int(column * SQUARE_SIZE + SQUARE_SIZE / 2), int((row + 1) * SQUARE_SIZE + SQUARE_SIZE / 2)), int(SQUARE_SIZE / 2 - 5))
            elif board[row][column] == 1:
                # Draw a black circle for player 2's game piece
                pygame.draw.circle(screen, BLACK, (int(column * SQUARE_SIZE + SQUARE_SIZE / 2), int((row + 1) * SQUARE_SIZE + SQUARE_SIZE / 2)), int(SQUARE_SIZE / 2 - 5))
    pygame.display.update()

# Method for dropping a game piece on the game board
def drop_piece(board, row, column, piece):
    board[row][column] = piece

# Method for checking if a given column is a valid location for dropping a game piece
def is_valid_location(board, column):
    return board[ROW_COUNT - 1][column] == 0

def GetValidLocations(board):
    ValidLocations = []
    for col in range(0, 7):
        if (board[0][col] == 0):  # law la2et makan fady f akher row (el fo2 khales) fel column yeb2a keda valid location
            ValidLocations.append(col)
    return ValidLocations


# betgebli awel row a2dar a7ott feeh el piece
def FirstValidRow(board, col):
    for r in range(5, -1, -1):
        if (board[r][col] == 0):
            return r
    return -1


#to check if someone won or of the game should continue
def IsGameOver(board):

    #check horizontal
    for i in range(0, 4):
        for j in range(0, 6):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j][i+1] == color and board[j][i+2] == color and board[j][i+3] == color):
                    return color

    #check vertical
    for i in range(0, 7):
        for j in range(0, 3):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j+1][i] == color and board[j+2][i] == color and board[j+3][i] == color):
                    return color

    #check diaganol (men fo2 3al shemal l ta7t 3al yemeen)
    for i in range(0, 4):
        for j in range(0, 3):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j+1][i+1] == color and board[j+2][i+2] == color and board[j+3][i+3] == color):
                    return color

    # check diaganol (men fo2 3al yemeen l ta7t 3al shemal)
    for i in range(0, 4):
        for j in range(3, 6):
            if (board[j][i] != 0):
                color = board[j][i]
                if (board[j][i] == color and board[j-1][i+1] == color and board[j-2][i+2] == color and board[j-3][i+3] == color):
                    return color

    return 0


def evaluate_window(window, piece):
    score = 0
    opp_piece = -1
    if piece == -1: #law el piece el 7aleya agent
        opp_piece = 1 #hakhally el opponent el computer

    if window.count(piece) == 4: #law la2et 4 pieces gamb ba3d bad hadeeh a3la score
        score += 100
    elif window.count(piece) == 3 and window.count(EMPTY) == 1: #law 3 pieces gamb ba3d w gambohom piece fadya hadeeh score a2al senna
        score += 5
    elif window.count(piece) == 2 and window.count(EMPTY) == 2: #law 2 pieces gamb ba3d w gambohom 2 pieces fadyeen hadeeh score a2al
        score += 2

    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1: #law EL OPPONENT 3ando 3 pieces gamb ba3d w gambohom piece fadya hana22as el score gamed 3ashan di keda awash case
        score -= 4

    return score


#calculate all scores for each possible move for each player during the play
def score_position(board, piece):
    score = 0

    center_column = [row[7 // 2] for row in board]
    center_array = [int(i) for i in center_column]
    center_count = center_array.count(piece)
    score += center_count * 3

    #score horizontal
    for r in range(0, 6):
        row_array = [int(i) for i in board[r]]
        for c in range(0, 4):
            window = row_array[c:c+4]
            score += evaluate_window(window, piece)

    #score vertical
    for c in range(0, 7):
        col_array = [int(board[r][c]) for r in range(0, 6)]
        for r in range(0, 3):
            window = col_array[r:r+4]
            score += evaluate_window(window, piece)

    #score diagonal
    for r in range(0, 3):
        for c in range(0, 4):
            window = [board[r + i][c + i] for i in range(0, 4)]
            score += evaluate_window(window, piece)

    #score diagonal
    for r in range(0, 3):
        for c in range(0, 4):
            window = [board[r + 3 - i][c + i] for i in range(0, 4)]
            score += evaluate_window(window, piece)

    return score


def Minimax(board, depth, MaxPlayer):

    ValidLocations = GetValidLocations(board)
    if (depth == 0 or IsGameOver(board) != 0):
        if (IsGameOver(board) == -1):
            return None, -10000000000
        elif (IsGameOver(board) == 1):
            return None, 10000000000
        elif (depth == 0):
            return None, score_position(board, 1)

    column = random.choice(ValidLocations)

    if (MaxPlayer):
        MaxEvaluation = -math.inf
        for col in ValidLocations:
            row = FirstValidRow(board, col)
            TempBoard = [row[:] for row in board]
            TempBoard[row][col] = 1
            NewScore = Minimax(TempBoard, depth - 1, False)[1]
            if (NewScore > MaxEvaluation):
                MaxEvaluation = NewScore
                column = col

        return column, MaxEvaluation

    else:
        MaxEvaluation = math.inf
        for col in ValidLocations:
            row = FirstValidRow(board, col)
            TempBoard = [row[:] for row in board]
            TempBoard[row][col] = -1
            NewScore = Minimax(TempBoard, depth - 1, False)[1]
            if (NewScore < MaxEvaluation):
                MaxEvaluation = NewScore
                column = col

        return column, MaxEvaluation



def run_game(board):
    # Initialize Pygame
    pygame.init()
    font = pygame.font.Font(None, 36)

    # Draw the Connect 4 board
    draw_board(board)

    # Loop until the game is over
    for i in range(0, 42):
        # If the user clicks the mouse, drop a game piece in the clicked cell for the current player
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return

        time.sleep(1.5)
        if (i % 2 == 0): #computer
            # Draw the "Waiting for Agent" message to the screen
            pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
            text_surface = font.render("Waiting for Agent", True, (255, 255, 255))
            screen.blit(text_surface, (10, 10))
            pygame.display.update()

            column = random.randint(0, 6)
            row = FirstValidRow(board, column)
            if (row != -1):
                board[row][column] = -1  # ba3addel fel board el asaseyya

        elif (i % 2 != 0): #Agent
            # Draw the "Waiting for Computer" message to the screen
            pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
            text_surface = font.render("Waiting for Computer", True, (255, 255, 255))
            screen.blit(text_surface, (10, 10))
            pygame.display.update()

            column, minimaxscore = Minimax(board, 3, True)

            row = FirstValidRow(board, column)
            board[row][column] = 1

        draw_board(board)

        if (IsGameOver(board) == 1 or IsGameOver(board) == -1):  # game over
            if (IsGameOver(board) == 0):
                # Draw the "IT'S A DRAW!" message to the screen
                pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
                text_surface = font.render("IT'S A DRAW!", True, (255, 255, 255))
                screen.blit(text_surface, (10, 10))
                pygame.display.update()

            elif (IsGameOver(board) == 1):
                # Draw the "WHITE (AGENT) WINS!" message to the screen
                pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
                text_surface = font.render("WHITE (AGENT) WINS!", True, (255, 255, 255))
                screen.blit(text_surface, (10, 10))
                pygame.display.update()

            elif (IsGameOver(board) == -1):
                # Draw the "BLACK (COMPUTER) WINS!" message to the screen
                pygame.draw.rect(screen, (0, 0, 0), (10, 10, 270, 50))
                text_surface = font.render("BLACK (COMPUTER) WINS!", True, (255, 255, 255))
                screen.blit(text_surface, (10, 10))
                pygame.display.update()

            time.sleep(5)
            break


    # Quit Pygame when the game is over
    #pygame.quit()

run_game(board)
